


#to be used for each muscle origins
def create_origin_attachment(): #function creates attachment as new object, parents to muscle empty, also contains functions to recenter object, get origin_centroid, create boundary, and calculate origin_normal
    # keep track of objects in scene to later rename new objects (#can't just rename active object bc duplicated object doesn't automatically become active)
    scn = bpy.context.scene
    names = [ obj.name for obj in scn.objects]
    #select faces, duplicate, separate
    bpy.ops.mesh.duplicate()
    bpy.ops.mesh.separate(type='SELECTED')
    bpy.ops.object.mode_set(mode = 'OBJECT')
    bpy.ops.object.select_all(action='DESELECT') 
    new_objs = [ obj for obj in scn.objects if not obj.name in names] 
    #rename new object and select and make active
    for obj in new_objs:
        obj.name = Muscle + " origin"
        obj.data.name = obj.name #set mesh name to object name
        obj.select_set(True)
        bpy.context.view_layer.objects.active = bpy.data.objects[Muscle + " origin"]
    #Parent to the muscle empty 
    bpy.context.view_layer.objects.active = bpy.data.objects[Muscle]   #This works!
    bpy.data.objects[Muscle].select_set(True)
    bpy.ops.object.parent_set(keep_transform=True)
    bpy.data.objects[Muscle].select_set(False) #make sure only origin is selected
    bpy.context.view_layer.objects.active = bpy.data.objects[Muscle + " origin"]
    obj = bpy.context.view_layer.objects.active
    object_Recenter(obj)
    origin_centroid = calculate_centroid(obj)
    boundary = create_boundary(obj)
    #origin_normal = get_normal(boundary)


def create_insertion_attachment(): #function creates attachment as new object, parents to muscle empty, also contains functions to recenter object, get insertionb_centroid, create boundary, and get insertion_normal
    # keep track of objects in scene to later rename new objects (#can't just rename active object bc duplicated object doesn't automatically become active)
    scn = bpy.context.scene
    names = [ obj.name for obj in scn.objects]
    #select faces, duplicate, separate
    bpy.ops.mesh.duplicate()
    bpy.ops.mesh.separate(type='SELECTED')
    bpy.ops.object.mode_set(mode = 'OBJECT')
    bpy.ops.object.select_all(action='DESELECT') 
    new_objs = [ obj for obj in scn.objects if not obj.name in names] #sometimes this doesn't work and throws error bpy.context.view_layer.objects.active = bpy.data.objects[Muscle]
    for obj in new_objs:
        obj.name = Muscle + " insertion"
        obj.data.name = obj.name #set mesh name to object name
        obj.select_set(True)
        bpy.context.view_layer.objects.active = bpy.data.objects[Muscle + " insertion"]
    #Parent to the muscle empty 
    bpy.context.view_layer.objects.active = bpy.data.objects[Muscle]   #This works!
    bpy.data.objects[Muscle].select_set(True)
    bpy.ops.object.parent_set(keep_transform=True)
    bpy.data.objects[Muscle].select_set(False) #make sure only origin is selected
    bpy.context.view_layer.objects.active = bpy.data.objects[Muscle + " insertion"]
    obj = bpy.context.view_layer.objects.active
    object_Recenter(obj)
    insertion_centroid = calculate_centroid(obj)
    boundary =create_boundary(obj)
    insertion_normal = get_normal(boundary)